{"ast":null,"code":"import _classCallCheck from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/William/Workspaces/Web/cccg/src/canvas.js\";\nimport React from 'react';\nimport './index.css';\nimport jsQR from \"jsqr\";\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Canvas, _React$Component);\n\n  function Canvas(props) {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Canvas).call(this, props));\n\n    _this.getImageDataScaled = function (imageElement) {\n      var maxWidth = 1920;\n      var maxHeight = 1080;\n      var scalingRatio = Math.min(1, maxWidth / imageElement.naturalWidth, maxHeight / imageElement.naturalHeight);\n      var width = imageElement.naturalWidth * scalingRatio;\n      var height = imageElement.naturalHeight * scalingRatio;\n      var canvas = _this.refs.canvas;\n      canvas.width = width;\n      canvas.height = height;\n      var canvasCtx = canvas.getContext('2d');\n      canvasCtx.drawImage(imageElement, 0, 0, width, height);\n      return canvasCtx.getImageData(0, 0, width, height);\n    };\n\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var imageElement = this.refs.image;\n\n      imageElement.onload = function () {\n        var width = imageElement.naturalWidth;\n        var height = imageElement.naturalHeight; //get the doc's canvas and set the widtha nd height\n\n        var canvas = _this2.refs.canvas;\n        canvas.width = width;\n        canvas.height = height; //get the context and draw the image at 0,0\n\n        var canvasCtx = canvas.getContext('2d');\n        canvasCtx.drawImage(imageElement, 0, 0, width, height);\n        var imgData = canvasCtx.getImageData(0, 0, width, height);\n        var imgArray = new Uint8Array(imgData.data);\n        var code = jsQR(imgArray, width, height);\n\n        if (code) {\n          console.log(\"Found QR code\", code);\n\n          _this2.props.onQRCodeRead(code);\n        } else {}\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        ref: \"canvas\",\n        className: \"hidden\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        ref: \"image\",\n        src: this.props.image,\n        alt: \"canvas\",\n        className: \"hidden\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Canvas;\n}(React.Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/William/Workspaces/Web/cccg/src/canvas.js"],"names":["React","jsQR","Canvas","props","getImageDataScaled","imageElement","maxWidth","maxHeight","scalingRatio","Math","min","naturalWidth","naturalHeight","width","height","canvas","refs","canvasCtx","getContext","drawImage","getImageData","image","onload","imgData","imgArray","Uint8Array","data","code","console","log","onQRCodeRead","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport jsQR from \"jsqr\";\n\nclass Canvas extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  getImageDataScaled = (imageElement) => {\n    const maxWidth = 1920\n    const maxHeight = 1080\n    const scalingRatio = Math.min(\n      1, \n      maxWidth / imageElement.naturalWidth, \n      maxHeight / imageElement.naturalHeight\n    )\n  \n    const width = imageElement.naturalWidth * scalingRatio\n    const height = imageElement.naturalHeight * scalingRatio\n  \n    const canvas = this.refs.canvas\n    canvas.width = width\n    canvas.height = height\n  \n    const canvasCtx = canvas.getContext('2d')\n    canvasCtx.drawImage(imageElement, 0, 0, width, height)\n  \n    return canvasCtx.getImageData(0, 0, width, height)\n  }\n\n  componentDidMount() {\n    const imageElement = this.refs.image\n    imageElement.onload = () => {\n      \n      const width = imageElement.naturalWidth\n      const height = imageElement.naturalHeight\n    \n      //get the doc's canvas and set the widtha nd height\n      const canvas = this.refs.canvas\n      canvas.width = width\n      canvas.height = height\n    \n      //get the context and draw the image at 0,0\n      const canvasCtx = canvas.getContext('2d')\n      canvasCtx.drawImage(imageElement, 0, 0, width, height)\n    \n      const imgData = canvasCtx.getImageData(0, 0, width, height)\n      const imgArray = new Uint8Array(imgData.data);\n\n      const code = jsQR(imgArray, width, height);\n      if (code) {\n        console.log(\"Found QR code\", code);\n        this.props.onQRCodeRead(code)\n      } else {\n\n      }\n    }\n  }\n\n\n  render() {\n      return(\n        <div>\n          <canvas ref=\"canvas\" className=\"hidden\" />\n          <img ref=\"image\" src={this.props.image} alt=\"canvas\" className=\"hidden\" />\n        </div>\n      )\n    }\n}\nexport default Canvas"]},"metadata":{},"sourceType":"module"}