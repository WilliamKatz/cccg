{"ast":null,"code":"import _classCallCheck from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/William/Workspaces/Web/cccg/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport jsQR from 'jsqr';\nvar _global = global,\n    requestAnimationFrame = _global.requestAnimationFrame;\n\nvar QRScan =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QRScan, _Component);\n\n  function QRScan(props) {\n    var _this;\n\n    _classCallCheck(this, QRScan);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QRScan).call(this, props));\n    _this.state = {\n      notEnabled: true,\n      loading: true,\n      video: null\n    };\n    return _this;\n  }\n\n  _createClass(QRScan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var video = document.createElement('video');\n      var canvasElement = document.getElementById('qrCanvas');\n      var canvas = canvasElement.getContext('2d');\n      this.setState({\n        video: video\n      });\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment'\n        }\n      }).then(function (stream) {\n        video.srcObject = stream;\n        video.setAttribute('playsinline', true);\n        video.play();\n        requestAnimationFrame(tick);\n      });\n\n      var tick = function tick() {\n        if (_this2.state.notEnabled) _this2.setState({\n          notEnabled: false\n        });\n\n        if (video.readyState === video.HAVE_ENOUGH_DATA) {\n          if (_this2.state.loading) _this2.setState({\n            loading: false\n          });\n          canvasElement.height = video.videoHeight;\n          canvasElement.width = video.videoWidth;\n          canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n          var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n          var code = jsQR(imageData.data, imageData.width, imageData.height, {\n            inversionAttempts: 'dontInvert'\n          });\n\n          if (code) {\n            _this2.props.onFind(code.data);\n          }\n        }\n\n        requestAnimationFrame(tick);\n      };\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.video.pause();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var message;\n\n      if (this.state.notEnabled) {\n        message = React.createElement(\"div\", null, React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"camera\"\n        }, \"\\uD83C\\uDFA5\"), \" Unable to access video stream (please make sure you have a webcam enabled)\");\n      } else if (this.state.loading) {\n        message = React.createElement(\"div\", null, React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"time\"\n        }, \"\\u231B\"), \" Loading video...\");\n      }\n\n      return React.createElement(\"div\", null, message, React.createElement(\"canvas\", {\n        id: \"qrCanvas\"\n      }));\n    }\n  }]);\n\n  return QRScan;\n}(Component);\n\nexport default QRScan;","map":null,"metadata":{},"sourceType":"module"}